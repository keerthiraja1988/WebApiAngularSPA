@inherits MainLayoutBase

@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Components
@using BlazorSPA.Infrastructure

@inject IUriHelper _uriHelper
@inject ILogger<MainLayout>  _logger
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage

@inject AppState _appState

<div class="main">

    <nav class="navbar navbar-expand-lg navbar-dark bg-success">

        <div class="container-fluid pt-1 pb-1">
            <a style="padding-top: 0px;" class="navbar-brand" href="#">Cryptography</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent"
                    aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse"
                 style="display: @(this.IsLoginNavVisible ? " " : " none !important" )"
                 id="navBarLogin">
                <ul class="navbar-nav mr-auto">

                    <li class="nav-item pt-0 pb-0" id="nav-ItemLogin">
                        <a href="Login"
                           class="nav-link" id="navbarLogin" style="cursor:pointer">Login</a>
                    </li>

                    <li class="nav-item pt-0 pb-0" id="nav-ItemRegister">
                        <a href="Register"
                           style="cursor:pointer" class="nav-link" id="navbarRegister">Register</a>
                    </li>
                </ul>
            </div>

            <div style="display: @(this.IsLoginNavVisible ?  " none !important" : "" )" class="collapse navbar-collapse"
                 id="navbarAuthenticated">
                <ul class="navbar-nav mr-auto">

                    <li class="nav-item pt-0 pb-0" id="nav-ItemHome">
                        <a class="nav-link" href="" id="navbarHome">Home</a>
                    </li>

                    <li class="nav-item pt-0 pb-0" id="nav-ItemHome">
                        <a class="nav-link" href="counter" id="navbarHome">Counter</a>
                    </li>
                    <li class="nav-item pt-0 pb-0" id="nav-ItemHome">
                        <a class="nav-link" href="fetchdata" id="navbarHome">Fetch data</a>
                    </li>
                </ul>
            </div>

            <div style="padding-bottom: 2px;
                     padding-right: 7px;
                        display: @(this.IsLoginNavVisible ?  " none !important " : " flex" )
                     "
                 class="d-flex justify-content-end">
                <button type="button"
                        class="btn btn-outline-light" data-toggle="tooltip" data-placement="bottom" title="Click to see current user information">
                    Hello Keerthi
                </button>

                <button type="button" onclick="@(async () => await this.LogOutBtnOnClickAsync())"
                        data-toggle="tooltip" data-placement="bottom" title="Logout Application"
                        style="color:white;margin-left: 9px;padding-right:6px;" class="btn btn-danger">
                    <i style="font-size: 20px;margin-top: 6px;margin-left: 0px;margin-right: 0px;" class="fas fa-power-off"></i>
                </button>
            </div>
        </div>
    </nav>
    <div class="container-fluid">

        <main role="main" class="pb-3 pt-2">
            @Body
        </main>
    </div>
</div>

@functions {

    private async Task LogOutBtnOnClickAsync()
    {
        await this._appState.LogOutUserAsync();
    }

    protected override async Task OnInitAsync()
    {

        string authenticationToken = _localStorage.GetItem<string>
            ("AuthenticationToken");

        DateTime expiresOn = _localStorage.GetItem<DateTime>
            ("ExpiresOn");

        this._logger.LogInformation(expiresOn.ToString());

        if (authenticationToken != null && authenticationToken.Length > 0 && expiresOn >= DateTime.Now)
        {
            this.IsLoginNavVisible = false;
        }
        else
        {
            string currentUrl = this._uriHelper.GetAbsoluteUri();

            if (currentUrl != "http://localhost:1833/Login" || currentUrl != "http://localhost:1833/Register")
            {
                if (currentUrl == "http://localhost:1833/Login")
                {
                    this._uriHelper.NavigateTo("Login");
                }
                else if (currentUrl == "http://localhost:1833/Register")
                {
                    this._uriHelper.NavigateTo("Register");
                }
            }

            this.IsLoginNavVisible = true;
        }

    }
}